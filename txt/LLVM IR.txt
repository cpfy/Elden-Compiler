@arr1 = dso_local global [10 x [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]]] zeroinitializer
@arr2 = dso_local global [10 x [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]]] zeroinitializer

define dso_local void @loop1(i32 %0, i32 %1) {
%3 = alloca i32
store i32 %0, i32* %3
%4 = alloca i32
store i32 %1, i32* %4
%5 = alloca i32
%6 = alloca i32
%7 = alloca i32
%8 = alloca i32
%9 = alloca i32
%10 = alloca i32
%11 = alloca i32
store i32 0, i32* %5
br label %12
12:
%13 = load i32, i32* %5
%14 = load i32, i32* %3
%15 = icmp slt i32 %13, %14
%16 = zext i1 %15 to i32
%17 = icmp ne i32 %16, 0
br i1 %17, label %18, label %112
18:
%19 = load i32, i32* %5
%20 = load i32, i32* %4
%21 = icmp slt i32 %19, %20
%22 = zext i1 %21 to i32
%23 = icmp ne i32 %22, 0
br i1 %23, label %24, label %112
24:
store i32 0, i32* %6
br label %25
25:
%26 = load i32, i32* %6
%27 = icmp slt i32 %26, 2
%28 = zext i1 %27 to i32
%29 = icmp ne i32 %28, 0
br i1 %29, label %30, label %109
30:
store i32 0, i32* %7
br label %31
31:
%32 = load i32, i32* %7
%33 = icmp slt i32 %32, 3
%34 = zext i1 %33 to i32
%35 = icmp ne i32 %34, 0
br i1 %35, label %36, label %106
36:
store i32 0, i32* %8
br label %37
37:
%38 = load i32, i32* %8
%39 = icmp slt i32 %38, 4
%40 = zext i1 %39 to i32
%41 = icmp ne i32 %40, 0
br i1 %41, label %42, label %103
42:
store i32 0, i32* %9
br label %43
43:
%44 = load i32, i32* %9
%45 = icmp slt i32 %44, 5
%46 = zext i1 %45 to i32
%47 = icmp ne i32 %46, 0
br i1 %47, label %48, label %100
48:
store i32 0, i32* %10
br label %49
49:
%50 = load i32, i32* %10
%51 = icmp slt i32 %50, 6
%52 = zext i1 %51 to i32
%53 = icmp ne i32 %52, 0
br i1 %53, label %54, label %97
54:
store i32 0, i32* %11
br label %55
55:
%56 = load i32, i32* %11
%57 = icmp slt i32 %56, 2
%58 = zext i1 %57 to i32
%59 = icmp ne i32 %58, 0
br i1 %59, label %60, label %94
60:
%61 = load i32, i32* %5
%62 = load i32, i32* %6
%63 = add i32 %61, %62
%64 = load i32, i32* %7
%65 = add i32 %63, %64
%66 = load i32, i32* %8
%67 = add i32 %65, %66
%68 = load i32, i32* %9
%69 = add i32 %67, %68
%70 = load i32, i32* %10
%71 = add i32 %69, %70
%72 = load i32, i32* %11
%73 = add i32 %71, %72
%74 = load i32, i32* %3
%75 = add i32 %73, %74
%76 = load i32, i32* %4
%77 = add i32 %75, %76
%78 = load i32, i32* %5
%79 = getelementptr inbounds [10 x [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]]], [10 x [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]]]* @arr1, i32 0, i32 %78
%80 = load i32, i32* %6
%81 = getelementptr inbounds [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]], [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]]* %79, i32 0, i32 %80
%82 = load i32, i32* %7
%83 = getelementptr inbounds [3 x [4 x [5 x [6 x [2 x i32]]]]], [3 x [4 x [5 x [6 x [2 x i32]]]]]* %81, i32 0, i32 %82
%84 = load i32, i32* %8
%85 = getelementptr inbounds [4 x [5 x [6 x [2 x i32]]]], [4 x [5 x [6 x [2 x i32]]]]* %83, i32 0, i32 %84
%86 = load i32, i32* %9
%87 = getelementptr inbounds [5 x [6 x [2 x i32]]], [5 x [6 x [2 x i32]]]* %85, i32 0, i32 %86
%88 = load i32, i32* %10
%89 = getelementptr inbounds [6 x [2 x i32]], [6 x [2 x i32]]* %87, i32 0, i32 %88
%90 = load i32, i32* %11
%91 = getelementptr inbounds [2 x i32], [2 x i32]* %89, i32 0, i32 %90
store i32 %77, i32* %91
%92 = load i32, i32* %11
%93 = add i32 %92, 1
store i32 %93, i32* %11
br label %55
94:
%95 = load i32, i32* %10
%96 = add i32 %95, 1
store i32 %96, i32* %10
br label %49
97:
%98 = load i32, i32* %9
%99 = add i32 %98, 1
store i32 %99, i32* %9
br label %43
100:
%101 = load i32, i32* %8
%102 = add i32 %101, 1
store i32 %102, i32* %8
br label %37
103:
%104 = load i32, i32* %7
%105 = add i32 %104, 1
store i32 %105, i32* %7
br label %31
106:
%107 = load i32, i32* %6
%108 = add i32 %107, 1
store i32 %108, i32* %6
br label %25
109:
%110 = load i32, i32* %5
%111 = add i32 %110, 1
store i32 %111, i32* %5
br label %12
112:
ret void
}

define dso_local void @loop2() {
%1 = alloca i32
%2 = alloca i32
%3 = alloca i32
%4 = alloca i32
%5 = alloca i32
%6 = alloca i32
%7 = alloca i32
store i32 0, i32* %1
br label %8
8:
%9 = load i32, i32* %1
%10 = icmp slt i32 %9, 10
%11 = zext i1 %10 to i32
%12 = icmp ne i32 %11, 0
br i1 %12, label %13, label %91
13:
store i32 0, i32* %2
br label %14
14:
%15 = load i32, i32* %2
%16 = icmp slt i32 %15, 2
%17 = zext i1 %16 to i32
%18 = icmp ne i32 %17, 0
br i1 %18, label %19, label %88
19:
store i32 0, i32* %3
br label %20
20:
%21 = load i32, i32* %3
%22 = icmp slt i32 %21, 3
%23 = zext i1 %22 to i32
%24 = icmp ne i32 %23, 0
br i1 %24, label %25, label %85
25:
store i32 0, i32* %4
br label %26
26:
%27 = load i32, i32* %4
%28 = icmp slt i32 %27, 2
%29 = zext i1 %28 to i32
%30 = icmp ne i32 %29, 0
br i1 %30, label %31, label %82
31:
store i32 0, i32* %5
br label %32
32:
%33 = load i32, i32* %5
%34 = icmp slt i32 %33, 4
%35 = zext i1 %34 to i32
%36 = icmp ne i32 %35, 0
br i1 %36, label %37, label %79
37:
store i32 0, i32* %6
br label %38
38:
%39 = load i32, i32* %6
%40 = icmp slt i32 %39, 8
%41 = zext i1 %40 to i32
%42 = icmp ne i32 %41, 0
br i1 %42, label %43, label %76
43:
store i32 0, i32* %7
br label %44
44:
%45 = load i32, i32* %7
%46 = icmp slt i32 %45, 7
%47 = zext i1 %46 to i32
%48 = icmp ne i32 %47, 0
br i1 %48, label %49, label %73
49:
%50 = load i32, i32* %1
%51 = load i32, i32* %2
%52 = add i32 %50, %51
%53 = load i32, i32* %4
%54 = add i32 %52, %53
%55 = load i32, i32* %7
%56 = add i32 %54, %55
%57 = load i32, i32* %1
%58 = getelementptr inbounds [10 x [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]]], [10 x [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]]]* @arr2, i32 0, i32 %57
%59 = load i32, i32* %2
%60 = getelementptr inbounds [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]], [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]]* %58, i32 0, i32 %59
%61 = load i32, i32* %3
%62 = getelementptr inbounds [3 x [2 x [4 x [8 x [7 x i32]]]]], [3 x [2 x [4 x [8 x [7 x i32]]]]]* %60, i32 0, i32 %61
%63 = load i32, i32* %4
%64 = getelementptr inbounds [2 x [4 x [8 x [7 x i32]]]], [2 x [4 x [8 x [7 x i32]]]]* %62, i32 0, i32 %63
%65 = load i32, i32* %5
%66 = getelementptr inbounds [4 x [8 x [7 x i32]]], [4 x [8 x [7 x i32]]]* %64, i32 0, i32 %65
%67 = load i32, i32* %6
%68 = getelementptr inbounds [8 x [7 x i32]], [8 x [7 x i32]]* %66, i32 0, i32 %67
%69 = load i32, i32* %7
%70 = getelementptr inbounds [7 x i32], [7 x i32]* %68, i32 0, i32 %69
store i32 %56, i32* %70
%71 = load i32, i32* %7
%72 = add i32 %71, 1
store i32 %72, i32* %7
br label %44
73:
%74 = load i32, i32* %6
%75 = add i32 %74, 1
store i32 %75, i32* %6
br label %38
76:
%77 = load i32, i32* %5
%78 = add i32 %77, 1
store i32 %78, i32* %5
br label %32
79:
%80 = load i32, i32* %4
%81 = add i32 %80, 1
store i32 %81, i32* %4
br label %26
82:
%83 = load i32, i32* %3
%84 = add i32 %83, 1
store i32 %84, i32* %3
br label %20
85:
%86 = load i32, i32* %2
%87 = add i32 %86, 1
store i32 %87, i32* %2
br label %14
88:
%89 = load i32, i32* %1
%90 = add i32 %89, 1
store i32 %90, i32* %1
br label %8
91:
ret void
}

define dso_local i32 @loop3(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) {
%8 = alloca i32
store i32 %0, i32* %8
%9 = alloca i32
store i32 %1, i32* %9
%10 = alloca i32
store i32 %2, i32* %10
%11 = alloca i32
store i32 %3, i32* %11
%12 = alloca i32
store i32 %4, i32* %12
%13 = alloca i32
store i32 %5, i32* %13
%14 = alloca i32
store i32 %6, i32* %14
%15 = alloca i32
%16 = alloca i32
%17 = alloca i32
%18 = alloca i32
%19 = alloca i32
%20 = alloca i32
%21 = alloca i32
%22 = alloca i32
store i32 0, i32* %22
store i32 0, i32* %15
br label %23
23:
%24 = load i32, i32* %15
%25 = icmp slt i32 %24, 10
%26 = zext i1 %25 to i32
%27 = icmp ne i32 %26, 0
br i1 %27, label %28, label %175
28:
store i32 0, i32* %16
br label %29
29:
%30 = load i32, i32* %16
%31 = icmp slt i32 %30, 100
%32 = zext i1 %31 to i32
%33 = icmp ne i32 %32, 0
br i1 %33, label %34, label %164
34:
store i32 0, i32* %17
br label %35
35:
%36 = load i32, i32* %17
%37 = icmp slt i32 %36, 1000
%38 = zext i1 %37 to i32
%39 = icmp ne i32 %38, 0
br i1 %39, label %40, label %153
40:
store i32 0, i32* %18
br label %41
41:
%42 = load i32, i32* %18
%43 = icmp slt i32 %42, 10000
%44 = zext i1 %43 to i32
%45 = icmp ne i32 %44, 0
br i1 %45, label %46, label %142
46:
store i32 0, i32* %19
br label %47
47:
%48 = load i32, i32* %19
%49 = icmp slt i32 %48, 100000
%50 = zext i1 %49 to i32
%51 = icmp ne i32 %50, 0
br i1 %51, label %52, label %131
52:
store i32 0, i32* %20
br label %53
53:
%54 = load i32, i32* %20
%55 = icmp slt i32 %54, 1000000
%56 = zext i1 %55 to i32
%57 = icmp ne i32 %56, 0
br i1 %57, label %58, label %120
58:
store i32 0, i32* %21
br label %59
59:
%60 = load i32, i32* %21
%61 = icmp slt i32 %60, 10000000
%62 = zext i1 %61 to i32
%63 = icmp ne i32 %62, 0
br i1 %63, label %64, label %109
64:
%65 = load i32, i32* %22
%66 = srem i32 %65, 817
%67 = load i32, i32* %15
%68 = getelementptr inbounds [10 x [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]]], [10 x [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]]]* @arr1, i32 0, i32 %67
%69 = load i32, i32* %16
%70 = getelementptr inbounds [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]], [2 x [3 x [4 x [5 x [6 x [2 x i32]]]]]]* %68, i32 0, i32 %69
%71 = load i32, i32* %17
%72 = getelementptr inbounds [3 x [4 x [5 x [6 x [2 x i32]]]]], [3 x [4 x [5 x [6 x [2 x i32]]]]]* %70, i32 0, i32 %71
%73 = load i32, i32* %18
%74 = getelementptr inbounds [4 x [5 x [6 x [2 x i32]]]], [4 x [5 x [6 x [2 x i32]]]]* %72, i32 0, i32 %73
%75 = load i32, i32* %19
%76 = getelementptr inbounds [5 x [6 x [2 x i32]]], [5 x [6 x [2 x i32]]]* %74, i32 0, i32 %75
%77 = load i32, i32* %20
%78 = getelementptr inbounds [6 x [2 x i32]], [6 x [2 x i32]]* %76, i32 0, i32 %77
%79 = load i32, i32* %21
%80 = getelementptr inbounds [2 x i32], [2 x i32]* %78, i32 0, i32 %79
%81 = load i32, i32* %80
%82 = add i32 %66, %81
%83 = load i32, i32* %15
%84 = getelementptr inbounds [10 x [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]]], [10 x [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]]]* @arr2, i32 0, i32 %83
%85 = load i32, i32* %16
%86 = getelementptr inbounds [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]], [2 x [3 x [2 x [4 x [8 x [7 x i32]]]]]]* %84, i32 0, i32 %85
%87 = load i32, i32* %17
%88 = getelementptr inbounds [3 x [2 x [4 x [8 x [7 x i32]]]]], [3 x [2 x [4 x [8 x [7 x i32]]]]]* %86, i32 0, i32 %87
%89 = load i32, i32* %18
%90 = getelementptr inbounds [2 x [4 x [8 x [7 x i32]]]], [2 x [4 x [8 x [7 x i32]]]]* %88, i32 0, i32 %89
%91 = load i32, i32* %19
%92 = getelementptr inbounds [4 x [8 x [7 x i32]]], [4 x [8 x [7 x i32]]]* %90, i32 0, i32 %91
%93 = load i32, i32* %20
%94 = getelementptr inbounds [8 x [7 x i32]], [8 x [7 x i32]]* %92, i32 0, i32 %93
%95 = load i32, i32* %21
%96 = getelementptr inbounds [7 x i32], [7 x i32]* %94, i32 0, i32 %95
%97 = load i32, i32* %96
%98 = add i32 %82, %97
store i32 %98, i32* %22
%99 = load i32, i32* %21
%100 = add i32 %99, 1
store i32 %100, i32* %21

%101 = load i32, i32* %21
%102 = load i32, i32* %14
%103 = icmp sge i32 %101, %102
%104 = zext i1 %103 to i32
%105 = icmp ne i32 %104, 0
br i1 %105, label %106, label %108
106:
br label %109	;break
107:
br label %108
108:
br label %59
109:
%110 = load i32, i32* %20
%111 = add i32 %110, 1
store i32 %111, i32* %20

%112 = load i32, i32* %20
%113 = load i32, i32* %13
%114 = icmp sge i32 %112, %113
%115 = zext i1 %114 to i32
%116 = icmp ne i32 %115, 0
br i1 %116, label %117, label %119
117:
br label %120	;break
118:
br label %119
119:
br label %53
120:
%121 = load i32, i32* %19
%122 = add i32 %121, 1
store i32 %122, i32* %19

%123 = load i32, i32* %19
%124 = load i32, i32* %12
%125 = icmp sge i32 %123, %124
%126 = zext i1 %125 to i32
%127 = icmp ne i32 %126, 0
br i1 %127, label %128, label %130
128:
br label %131	;break
129:
br label %130
130:
br label %47
131:
%132 = load i32, i32* %18
%133 = add i32 %132, 1
store i32 %133, i32* %18

%134 = load i32, i32* %18
%135 = load i32, i32* %11
%136 = icmp sge i32 %134, %135
%137 = zext i1 %136 to i32
%138 = icmp ne i32 %137, 0
br i1 %138, label %139, label %141
139:
br label %142	;break
140:
br label %141
141:
br label %41
142:
%143 = load i32, i32* %17
%144 = add i32 %143, 1
store i32 %144, i32* %17

%145 = load i32, i32* %17
%146 = load i32, i32* %10
%147 = icmp sge i32 %145, %146
%148 = zext i1 %147 to i32
%149 = icmp ne i32 %148, 0
br i1 %149, label %150, label %152
150:
br label %153	;break
151:
br label %152
152:
br label %35
153:
%154 = load i32, i32* %16
%155 = add i32 %154, 1
store i32 %155, i32* %16

%156 = load i32, i32* %16
%157 = load i32, i32* %9
%158 = icmp sge i32 %156, %157
%159 = zext i1 %158 to i32
%160 = icmp ne i32 %159, 0
br i1 %160, label %161, label %163
161:
br label %164	;break
162:
br label %163
163:
br label %29
164:
%165 = load i32, i32* %15
%166 = add i32 %165, 1
store i32 %166, i32* %15

%167 = load i32, i32* %15
%168 = load i32, i32* %8
%169 = icmp sge i32 %167, %168
%170 = zext i1 %169 to i32
%171 = icmp ne i32 %170, 0
br i1 %171, label %172, label %174
172:
br label %175	;break
173:
br label %174
174:
br label %23
175:
%176 = load i32, i32* %22
ret i32 %176
ret i32 0
}

define dso_local i32 @main() {
%1 = alloca i32
%2 = call i32 @getint()
store i32 %2, i32* %1
%3 = alloca i32
%4 = call i32 @getint()
store i32 %4, i32* %3
%5 = alloca i32
%6 = call i32 @getint()
store i32 %6, i32* %5
%7 = alloca i32
%8 = call i32 @getint()
store i32 %8, i32* %7
%9 = alloca i32
%10 = call i32 @getint()
store i32 %10, i32* %9
%11 = alloca i32
%12 = call i32 @getint()
store i32 %12, i32* %11
%13 = alloca i32
%14 = call i32 @getint()
store i32 %14, i32* %13
%15 = alloca i32
%16 = call i32 @getint()
store i32 %16, i32* %15
%17 = alloca i32
%18 = call i32 @getint()
store i32 %18, i32* %17
%19 = load i32, i32* %1
%20 = load i32, i32* %3
call void @loop1(i32 %19, i32 %20)
call void @loop2()
%21 = load i32, i32* %5
%22 = load i32, i32* %7
%23 = load i32, i32* %9
%24 = load i32, i32* %11
%25 = load i32, i32* %13
%26 = load i32, i32* %15
%27 = load i32, i32* %17
%28 = call i32 @loop3(i32 %21, i32 %22, i32 %23, i32 %24, i32 %25, i32 %26, i32 %27)
call void @putint(i32 %28)
ret i32 %28
}
declare dso_local i32 @getint()
declare dso_local i32 @getch()
declare dso_local float @getfloat()
declare dso_local i32 @getarray(i32*)
declare dso_local i32 @getfarray(float*)
declare dso_local void @putint(i32)
declare dso_local void @putch(i32)
declare dso_local void @putfloat(float)
declare dso_local void @putarray(i32, i32*)
declare dso_local void @putfarray(i32, float*)
