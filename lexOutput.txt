CONSTTK const 1
INTTK int 1
IDENFR MAX_DIM_X 1
ASSIGN = 1
INTCON 8 1
COMMA , 1
IDENFR MAX_DIM_Y 1
ASSIGN = 1
INTCON 8 1
SEMICN ; 1
FLOATTK float 2
IDENFR test_block 2
LBRACK [ 2
IDENFR MAX_DIM_X 2
RBRACK ] 2
LBRACK [ 2
IDENFR MAX_DIM_Y 2
RBRACK ] 2
SEMICN ; 2
FLOATTK float 3
IDENFR test_dct 3
LBRACK [ 3
IDENFR MAX_DIM_X 3
RBRACK ] 3
LBRACK [ 3
IDENFR MAX_DIM_Y 3
RBRACK ] 3
SEMICN ; 3
FLOATTK float 4
IDENFR test_idct 4
LBRACK [ 4
IDENFR MAX_DIM_X 4
RBRACK ] 4
LBRACK [ 4
IDENFR MAX_DIM_Y 4
RBRACK ] 4
SEMICN ; 4
CONSTTK const 6
FLOATTK float 6
IDENFR PI 6
ASSIGN = 6
FLOATCON 3.14159265359 6
COMMA , 6
IDENFR TWO_PI 6
ASSIGN = 6
FLOATCON 6.28318530718 6
COMMA , 6
IDENFR EPSILON 6
ASSIGN = 6
FLOATCON 1e-6 6
SEMICN ; 6
FLOATTK float 8
IDENFR my_fabs 8
LPARENT ( 8
FLOATTK float 8
IDENFR x 8
RPARENT ) 8
LBRACE { 8
IFTK if 9
LPARENT ( 9
IDENFR x 9
GRE > 9
INTCON 0 9
RPARENT ) 9
RETURNTK return 9
IDENFR x 9
SEMICN ; 9
RETURNTK return 10
MINU - 10
IDENFR x 10
SEMICN ; 10
RBRACE } 11
FLOATTK float 13
IDENFR p 13
LPARENT ( 13
FLOATTK float 13
IDENFR x 13
RPARENT ) 13
LBRACE { 13
RETURNTK return 13
INTCON 3 13
MULT * 13
IDENFR x 13
MINU - 13
INTCON 4 13
MULT * 13
IDENFR x 13
MULT * 13
IDENFR x 13
MULT * 13
IDENFR x 13
SEMICN ; 13
RBRACE } 13
FLOATTK float 15
IDENFR my_sin_impl 15
LPARENT ( 15
FLOATTK float 15
IDENFR x 15
RPARENT ) 15
LBRACE { 15
IFTK if 16
LPARENT ( 16
IDENFR my_fabs 16
LPARENT ( 16
IDENFR x 16
RPARENT ) 16
LEQ <= 16
IDENFR EPSILON 16
RPARENT ) 16
RETURNTK return 16
IDENFR x 16
SEMICN ; 16
RETURNTK return 17
IDENFR p 17
LPARENT ( 17
IDENFR my_sin_impl 17
LPARENT ( 17
IDENFR x 17
DIV / 17
FLOATCON 3.0 17
RPARENT ) 17
RPARENT ) 17
SEMICN ; 17
RBRACE } 18
FLOATTK float 20
IDENFR my_sin 20
LPARENT ( 20
FLOATTK float 20
IDENFR x 20
RPARENT ) 20
LBRACE { 20
IFTK if 21
LPARENT ( 21
IDENFR x 21
GRE > 21
IDENFR TWO_PI 21
OR || 21
IDENFR x 21
LSS < 21
MINU - 21
IDENFR TWO_PI 21
RPARENT ) 21
LBRACE { 21
INTTK int 22
IDENFR xx 22
ASSIGN = 22
IDENFR x 22
DIV / 22
IDENFR TWO_PI 22
SEMICN ; 22
IDENFR x 23
ASSIGN = 23
IDENFR x 23
MINU - 23
IDENFR xx 23
MULT * 23
IDENFR TWO_PI 23
SEMICN ; 23
RBRACE } 24
IFTK if 25
LPARENT ( 25
IDENFR x 25
GRE > 25
IDENFR PI 25
RPARENT ) 25
IDENFR x 25
ASSIGN = 25
IDENFR x 25
MINU - 25
IDENFR TWO_PI 25
SEMICN ; 25
IFTK if 26
LPARENT ( 26
IDENFR x 26
LSS < 26
MINU - 26
IDENFR PI 26
RPARENT ) 26
IDENFR x 26
ASSIGN = 26
IDENFR x 26
PLUS + 26
IDENFR TWO_PI 26
SEMICN ; 26
RETURNTK return 27
IDENFR my_sin_impl 27
LPARENT ( 27
IDENFR x 27
RPARENT ) 27
SEMICN ; 27
RBRACE } 28
FLOATTK float 30
IDENFR my_cos 30
LPARENT ( 30
FLOATTK float 30
IDENFR x 30
RPARENT ) 30
LBRACE { 30
RETURNTK return 30
IDENFR my_sin 30
LPARENT ( 30
IDENFR x 30
PLUS + 30
IDENFR PI 30
DIV / 30
INTCON 2 30
RPARENT ) 30
SEMICN ; 30
RBRACE } 30
VOIDTK void 32
IDENFR write_mat 32
LPARENT ( 32
FLOATTK float 32
IDENFR mat 32
LBRACK [ 32
RBRACK ] 32
LBRACK [ 32
IDENFR MAX_DIM_Y 32
RBRACK ] 32
COMMA , 32
INTTK int 32
IDENFR n 32
COMMA , 32
INTTK int 32
IDENFR m 32
RPARENT ) 32
LBRACE { 32
INTTK int 33
IDENFR i 33
ASSIGN = 33
INTCON 0 33
SEMICN ; 33
WHILETK while 34
LPARENT ( 34
IDENFR i 34
LSS < 34
IDENFR n 34
RPARENT ) 34
LBRACE { 34
IDENFR putfloat 35
LPARENT ( 35
IDENFR mat 35
LBRACK [ 35
IDENFR i 35
RBRACK ] 35
LBRACK [ 35
INTCON 0 35
RBRACK ] 35
RPARENT ) 35
SEMICN ; 35
INTTK int 36
IDENFR j 36
ASSIGN = 36
INTCON 1 36
SEMICN ; 36
WHILETK while 37
LPARENT ( 37
IDENFR j 37
LSS < 37
IDENFR m 37
RPARENT ) 37
LBRACE { 37
IDENFR putch 38
LPARENT ( 38
INTCON 32 38
RPARENT ) 38
SEMICN ; 38
IDENFR putfloat 39
LPARENT ( 39
IDENFR mat 39
LBRACK [ 39
IDENFR i 39
RBRACK ] 39
LBRACK [ 39
IDENFR j 39
RBRACK ] 39
RPARENT ) 39
SEMICN ; 39
IDENFR j 40
ASSIGN = 40
IDENFR j 40
PLUS + 40
INTCON 1 40
SEMICN ; 40
RBRACE } 41
IDENFR putch 42
LPARENT ( 42
INTCON 10 42
RPARENT ) 42
SEMICN ; 42
IDENFR i 43
ASSIGN = 43
IDENFR i 43
PLUS + 43
INTCON 1 43
SEMICN ; 43
RBRACE } 44
IDENFR putch 45
LPARENT ( 45
INTCON 10 45
RPARENT ) 45
SEMICN ; 45
RBRACE } 46
VOIDTK void 48
IDENFR dct 48
LPARENT ( 48
FLOATTK float 48
IDENFR dct_mat 48
LBRACK [ 48
RBRACK ] 48
LBRACK [ 48
IDENFR MAX_DIM_Y 48
RBRACK ] 48
COMMA , 48
FLOATTK float 48
IDENFR mat 48
LBRACK [ 48
RBRACK ] 48
LBRACK [ 48
IDENFR MAX_DIM_Y 48
RBRACK ] 48
COMMA , 48
INTTK int 48
IDENFR n 48
COMMA , 48
INTTK int 48
IDENFR m 48
RPARENT ) 48
LBRACE { 48
INTTK int 49
IDENFR u 49
ASSIGN = 49
INTCON 0 49
SEMICN ; 49
WHILETK while 50
LPARENT ( 50
IDENFR u 50
LSS < 50
IDENFR n 50
RPARENT ) 50
LBRACE { 50
INTTK int 51
IDENFR v 51
ASSIGN = 51
INTCON 0 51
SEMICN ; 51
WHILETK while 52
LPARENT ( 52
IDENFR v 52
LSS < 52
IDENFR m 52
RPARENT ) 52
LBRACE { 52
IDENFR dct_mat 53
LBRACK [ 53
IDENFR u 53
RBRACK ] 53
LBRACK [ 53
IDENFR v 53
RBRACK ] 53
ASSIGN = 53
INTCON 0 53
SEMICN ; 53
INTTK int 54
IDENFR i 54
ASSIGN = 54
INTCON 0 54
SEMICN ; 54
WHILETK while 55
LPARENT ( 55
IDENFR i 55
LSS < 55
IDENFR n 55
RPARENT ) 55
LBRACE { 55
INTTK int 56
IDENFR j 56
ASSIGN = 56
INTCON 0 56
SEMICN ; 56
WHILETK while 57
LPARENT ( 57
IDENFR j 57
LSS < 57
IDENFR m 57
RPARENT ) 57
LBRACE { 57
IDENFR dct_mat 58
LBRACK [ 58
IDENFR u 58
RBRACK ] 58
LBRACK [ 58
IDENFR v 58
RBRACK ] 58
ASSIGN = 58
IDENFR dct_mat 59
LBRACK [ 59
IDENFR u 59
RBRACK ] 59
LBRACK [ 59
IDENFR v 59
RBRACK ] 59
PLUS + 59
IDENFR mat 59
LBRACK [ 59
IDENFR i 59
RBRACK ] 59
LBRACK [ 59
IDENFR j 59
RBRACK ] 59
MULT * 59
IDENFR my_cos 59
LPARENT ( 59
IDENFR PI 59
DIV / 59
IDENFR n 59
MULT * 59
LPARENT ( 59
IDENFR i 59
PLUS + 59
FLOATCON 1. 59
DIV / 59
FLOATCON 2. 59
RPARENT ) 59
MULT * 59
IDENFR u 59
RPARENT ) 59
MULT * 59
IDENFR my_cos 60
LPARENT ( 60
IDENFR PI 60
DIV / 60
IDENFR m 60
MULT * 60
LPARENT ( 60
IDENFR j 60
PLUS + 60
FLOATCON 1. 60
DIV / 60
FLOATCON 2. 60
RPARENT ) 60
MULT * 60
IDENFR v 60
RPARENT ) 60
SEMICN ; 60
IDENFR j 61
ASSIGN = 61
IDENFR j 61
PLUS + 61
INTCON 1 61
SEMICN ; 61
RBRACE } 62
IDENFR i 63
ASSIGN = 63
IDENFR i 63
PLUS + 63
INTCON 1 63
SEMICN ; 63
RBRACE } 64
IDENFR v 65
ASSIGN = 65
IDENFR v 65
PLUS + 65
INTCON 1 65
SEMICN ; 65
RBRACE } 66
IDENFR u 67
ASSIGN = 67
IDENFR u 67
PLUS + 67
INTCON 1 67
SEMICN ; 67
RBRACE } 68
RBRACE } 69
VOIDTK void 71
IDENFR idct 71
LPARENT ( 71
FLOATTK float 71
IDENFR mat 71
LBRACK [ 71
RBRACK ] 71
LBRACK [ 71
IDENFR MAX_DIM_Y 71
RBRACK ] 71
COMMA , 71
FLOATTK float 71
IDENFR dct_mat 71
LBRACK [ 71
RBRACK ] 71
LBRACK [ 71
IDENFR MAX_DIM_Y 71
RBRACK ] 71
COMMA , 71
INTTK int 71
IDENFR n 71
COMMA , 71
INTTK int 71
IDENFR m 71
RPARENT ) 71
LBRACE { 71
INTTK int 72
IDENFR u 72
ASSIGN = 72
INTCON 0 72
SEMICN ; 72
WHILETK while 73
LPARENT ( 73
IDENFR u 73
LSS < 73
IDENFR n 73
RPARENT ) 73
LBRACE { 73
INTTK int 74
IDENFR v 74
ASSIGN = 74
INTCON 0 74
SEMICN ; 74
WHILETK while 75
LPARENT ( 75
IDENFR v 75
LSS < 75
IDENFR m 75
RPARENT ) 75
LBRACE { 75
IDENFR mat 76
LBRACK [ 76
IDENFR u 76
RBRACK ] 76
LBRACK [ 76
IDENFR v 76
RBRACK ] 76
ASSIGN = 76
INTCON 1 76
DIV / 76
FLOATCON 4. 76
MULT * 76
IDENFR dct_mat 76
LBRACK [ 76
INTCON 0 76
RBRACK ] 76
LBRACK [ 76
INTCON 0 76
RBRACK ] 76
SEMICN ; 76
INTTK int 77
IDENFR i 77
COMMA , 77
IDENFR j 77
SEMICN ; 77
IDENFR i 79
ASSIGN = 79
INTCON 1 79
SEMICN ; 79
WHILETK while 80
LPARENT ( 80
IDENFR i 80
LSS < 80
IDENFR n 80
RPARENT ) 80
LBRACE { 80
IDENFR mat 81
LBRACK [ 81
IDENFR u 81
RBRACK ] 81
LBRACK [ 81
IDENFR v 81
RBRACK ] 81
ASSIGN = 81
IDENFR mat 81
LBRACK [ 81
IDENFR u 81
RBRACK ] 81
LBRACK [ 81
IDENFR v 81
RBRACK ] 81
PLUS + 81
INTCON 1 81
DIV / 81
FLOATCON 2. 81
MULT * 81
IDENFR dct_mat 81
LBRACK [ 81
IDENFR i 81
RBRACK ] 81
LBRACK [ 81
INTCON 0 81
RBRACK ] 81
SEMICN ; 81
IDENFR i 82
ASSIGN = 82
IDENFR i 82
PLUS + 82
INTCON 1 82
SEMICN ; 82
RBRACE } 83
IDENFR j 84
ASSIGN = 84
INTCON 1 84
SEMICN ; 84
WHILETK while 85
LPARENT ( 85
IDENFR j 85
LSS < 85
IDENFR m 85
RPARENT ) 85
LBRACE { 85
IDENFR mat 86
LBRACK [ 86
IDENFR u 86
RBRACK ] 86
LBRACK [ 86
IDENFR v 86
RBRACK ] 86
ASSIGN = 86
IDENFR mat 86
LBRACK [ 86
IDENFR u 86
RBRACK ] 86
LBRACK [ 86
IDENFR v 86
RBRACK ] 86
PLUS + 86
INTCON 1 86
DIV / 86
FLOATCON 2. 86
MULT * 86
IDENFR dct_mat 86
LBRACK [ 86
INTCON 0 86
RBRACK ] 86
LBRACK [ 86
IDENFR j 86
RBRACK ] 86
SEMICN ; 86
IDENFR j 87
ASSIGN = 87
IDENFR j 87
PLUS + 87
INTCON 1 87
SEMICN ; 87
RBRACE } 88
IDENFR i 90
ASSIGN = 90
INTCON 1 90
SEMICN ; 90
WHILETK while 91
LPARENT ( 91
IDENFR i 91
LSS < 91
IDENFR n 91
RPARENT ) 91
LBRACE { 91
IDENFR j 92
ASSIGN = 92
INTCON 1 92
SEMICN ; 92
WHILETK while 93
LPARENT ( 93
IDENFR j 93
LSS < 93
IDENFR m 93
RPARENT ) 93
LBRACE { 93
IDENFR mat 94
LBRACK [ 94
IDENFR u 94
RBRACK ] 94
LBRACK [ 94
IDENFR v 94
RBRACK ] 94
ASSIGN = 94
IDENFR mat 94
LBRACK [ 94
IDENFR u 94
RBRACK ] 94
LBRACK [ 94
IDENFR v 94
RBRACK ] 94
PLUS + 94
IDENFR dct_mat 94
LBRACK [ 94
IDENFR i 94
RBRACK ] 94
LBRACK [ 94
IDENFR j 94
RBRACK ] 94
MULT * 94
IDENFR my_cos 95
LPARENT ( 95
IDENFR PI 95
DIV / 95
IDENFR n 95
MULT * 95
LPARENT ( 95
IDENFR u 95
PLUS + 95
FLOATCON 1. 95
DIV / 95
FLOATCON 2. 95
RPARENT ) 95
MULT * 95
IDENFR i 95
RPARENT ) 95
MULT * 95
IDENFR my_cos 96
LPARENT ( 96
IDENFR PI 96
DIV / 96
IDENFR m 96
MULT * 96
LPARENT ( 96
IDENFR v 96
PLUS + 96
FLOATCON 1. 96
DIV / 96
FLOATCON 2. 96
RPARENT ) 96
MULT * 96
IDENFR j 96
RPARENT ) 96
SEMICN ; 96
IDENFR j 97
ASSIGN = 97
IDENFR j 97
PLUS + 97
INTCON 1 97
SEMICN ; 97
RBRACE } 98
IDENFR i 99
ASSIGN = 99
IDENFR i 99
PLUS + 99
INTCON 1 99
SEMICN ; 99
RBRACE } 100
IDENFR mat 101
LBRACK [ 101
IDENFR u 101
RBRACK ] 101
LBRACK [ 101
IDENFR v 101
RBRACK ] 101
ASSIGN = 101
IDENFR mat 101
LBRACK [ 101
IDENFR u 101
RBRACK ] 101
LBRACK [ 101
IDENFR v 101
RBRACK ] 101
MULT * 101
FLOATCON 2. 101
DIV / 101
IDENFR n 101
MULT * 101
FLOATCON 2. 101
DIV / 101
IDENFR m 101
SEMICN ; 101
IDENFR v 102
ASSIGN = 102
IDENFR v 102
PLUS + 102
INTCON 1 102
SEMICN ; 102
RBRACE } 103
IDENFR u 104
ASSIGN = 104
IDENFR u 104
PLUS + 104
INTCON 1 104
SEMICN ; 104
RBRACE } 105
RBRACE } 106
INTTK int 108
IDENFR main 108
LPARENT ( 108
RPARENT ) 108
LBRACE { 108
INTTK int 109
IDENFR dim_x 109
ASSIGN = 109
IDENFR getint 109
LPARENT ( 109
RPARENT ) 109
COMMA , 109
IDENFR dim_y 109
ASSIGN = 109
IDENFR getint 109
LPARENT ( 109
RPARENT ) 109
SEMICN ; 109
INTTK int 111
IDENFR i 111
ASSIGN = 111
INTCON 0 111
SEMICN ; 111
WHILETK while 112
LPARENT ( 112
IDENFR i 112
LSS < 112
IDENFR dim_x 112
RPARENT ) 112
LBRACE { 112
INTTK int 113
IDENFR j 113
ASSIGN = 113
INTCON 0 113
SEMICN ; 113
WHILETK while 114
LPARENT ( 114
IDENFR j 114
LSS < 114
IDENFR dim_y 114
RPARENT ) 114
LBRACE { 114
IDENFR test_block 115
LBRACK [ 115
IDENFR i 115
RBRACK ] 115
LBRACK [ 115
IDENFR j 115
RBRACK ] 115
ASSIGN = 115
IDENFR getfloat 115
LPARENT ( 115
RPARENT ) 115
SEMICN ; 115
IDENFR j 116
ASSIGN = 116
IDENFR j 116
PLUS + 116
INTCON 1 116
SEMICN ; 116
RBRACE } 117
IDENFR i 118
ASSIGN = 118
IDENFR i 118
PLUS + 118
INTCON 1 118
SEMICN ; 118
RBRACE } 119
IDENFR dct 121
LPARENT ( 121
IDENFR test_dct 121
COMMA , 121
IDENFR test_block 121
COMMA , 121
IDENFR dim_x 121
COMMA , 121
IDENFR dim_y 121
RPARENT ) 121
SEMICN ; 121
IDENFR write_mat 122
LPARENT ( 122
IDENFR test_dct 122
COMMA , 122
IDENFR dim_x 122
COMMA , 122
IDENFR dim_y 122
RPARENT ) 122
SEMICN ; 122
IDENFR idct 124
LPARENT ( 124
IDENFR test_idct 124
COMMA , 124
IDENFR test_dct 124
COMMA , 124
IDENFR dim_x 124
COMMA , 124
IDENFR dim_y 124
RPARENT ) 124
SEMICN ; 124
IDENFR write_mat 125
LPARENT ( 125
IDENFR test_idct 125
COMMA , 125
IDENFR dim_x 125
COMMA , 125
IDENFR dim_y 125
RPARENT ) 125
SEMICN ; 125
RETURNTK return 127
INTCON 0 127
SEMICN ; 127
RBRACE } 128
