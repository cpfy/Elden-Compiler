CONSTTK const 1
FLOATTK float 1
IDENFR e 1
ASSIGN = 1
FLOATCON 2.718281828459045 1
SEMICN ; 1
FLOATTK float 3
IDENFR my_fabs 3
LPARENT ( 3
FLOATTK float 3
IDENFR x 3
RPARENT ) 3
LBRACE { 3
IFTK if 4
LPARENT ( 4
IDENFR x 4
GRE > 4
INTCON 0 4
RPARENT ) 4
RETURNTK return 4
IDENFR x 4
SEMICN ; 4
RETURNTK return 5
MINU - 5
IDENFR x 5
SEMICN ; 5
RBRACE } 6
FLOATTK float 8
IDENFR my_pow 8
LPARENT ( 8
FLOATTK float 8
IDENFR a 8
COMMA , 8
INTTK int 8
IDENFR n 8
RPARENT ) 8
LBRACE { 8
IFTK if 9
LPARENT ( 9
IDENFR n 9
LSS < 9
INTCON 0 9
RPARENT ) 9
RETURNTK return 9
INTCON 1 9
DIV / 9
IDENFR my_pow 9
LPARENT ( 9
IDENFR a 9
COMMA , 9
MINU - 9
IDENFR n 9
RPARENT ) 9
SEMICN ; 9
FLOATTK float 10
IDENFR res 10
ASSIGN = 10
FLOATCON 1.0 10
SEMICN ; 10
WHILETK while 11
LPARENT ( 11
IDENFR n 11
RPARENT ) 11
LBRACE { 11
IFTK if 12
LPARENT ( 12
IDENFR n 12
MOD % 12
INTCON 2 12
RPARENT ) 12
IDENFR res 12
ASSIGN = 12
IDENFR res 12
MULT * 12
IDENFR a 12
SEMICN ; 12
IDENFR a 13
ASSIGN = 13
IDENFR a 13
MULT * 13
IDENFR a 13
SEMICN ; 13
IDENFR n 14
ASSIGN = 14
IDENFR n 14
DIV / 14
INTCON 2 14
SEMICN ; 14
RBRACE } 15
RETURNTK return 16
IDENFR res 16
SEMICN ; 16
RBRACE } 17
FLOATTK float 19
IDENFR my_sqrt 19
LPARENT ( 19
FLOATTK float 19
IDENFR x 19
RPARENT ) 19
LBRACE { 19
IFTK if 20
LPARENT ( 20
IDENFR x 20
GRE > 20
INTCON 100 20
RPARENT ) 20
RETURNTK return 20
FLOATCON 10.0 20
MULT * 20
IDENFR my_sqrt 20
LPARENT ( 20
IDENFR x 20
DIV / 20
INTCON 100 20
RPARENT ) 20
SEMICN ; 20
FLOATTK float 21
IDENFR t 21
ASSIGN = 21
IDENFR x 21
DIV / 21
INTCON 8 21
PLUS + 21
FLOATCON 0.5 21
PLUS + 21
INTCON 2 21
MULT * 21
IDENFR x 21
DIV / 21
LPARENT ( 21
INTCON 4 21
PLUS + 21
IDENFR x 21
RPARENT ) 21
SEMICN ; 21
INTTK int 22
IDENFR c 22
ASSIGN = 22
INTCON 10 22
SEMICN ; 22
WHILETK while 23
LPARENT ( 23
IDENFR c 23
RPARENT ) 23
LBRACE { 23
IDENFR t 24
ASSIGN = 24
LPARENT ( 24
IDENFR t 24
PLUS + 24
IDENFR x 24
DIV / 24
IDENFR t 24
RPARENT ) 24
DIV / 24
INTCON 2 24
SEMICN ; 24
IDENFR c 25
ASSIGN = 25
IDENFR c 25
MINU - 25
INTCON 1 25
SEMICN ; 25
RBRACE } 26
RETURNTK return 27
IDENFR t 27
SEMICN ; 27
RBRACE } 28
FLOATTK float 30
IDENFR F1 30
LPARENT ( 30
FLOATTK float 30
IDENFR x 30
RPARENT ) 30
LBRACE { 30
RETURNTK return 30
INTCON 1 30
DIV / 30
IDENFR x 30
SEMICN ; 30
RBRACE } 30
FLOATTK float 32
IDENFR F2 32
LPARENT ( 32
FLOATTK float 32
IDENFR x 32
RPARENT ) 32
LBRACE { 32
RETURNTK return 32
INTCON 1 32
DIV / 32
IDENFR my_sqrt 32
LPARENT ( 32
INTCON 1 32
MINU - 32
IDENFR x 32
MULT * 32
IDENFR x 32
RPARENT ) 32
SEMICN ; 32
RBRACE } 32
FLOATTK float 34
IDENFR simpson 34
LPARENT ( 34
FLOATTK float 34
IDENFR a 34
COMMA , 34
FLOATTK float 34
IDENFR b 34
COMMA , 34
INTTK int 34
IDENFR flag 34
RPARENT ) 34
LBRACE { 34
FLOATTK float 35
IDENFR c 35
ASSIGN = 35
IDENFR a 35
PLUS + 35
LPARENT ( 35
IDENFR b 35
MINU - 35
IDENFR a 35
RPARENT ) 35
DIV / 35
INTCON 2 35
SEMICN ; 35
IFTK if 36
LPARENT ( 36
IDENFR flag 36
EQL == 36
INTCON 1 36
RPARENT ) 36
RETURNTK return 36
LPARENT ( 36
IDENFR F1 36
LPARENT ( 36
IDENFR a 36
RPARENT ) 36
PLUS + 36
INTCON 4 36
MULT * 36
IDENFR F1 36
LPARENT ( 36
IDENFR c 36
RPARENT ) 36
PLUS + 36
IDENFR F1 36
LPARENT ( 36
IDENFR b 36
RPARENT ) 36
RPARENT ) 36
MULT * 36
LPARENT ( 36
IDENFR b 36
MINU - 36
IDENFR a 36
RPARENT ) 36
DIV / 36
INTCON 6 36
SEMICN ; 36
IFTK if 37
LPARENT ( 37
IDENFR flag 37
EQL == 37
INTCON 2 37
RPARENT ) 37
RETURNTK return 37
LPARENT ( 37
IDENFR F2 37
LPARENT ( 37
IDENFR a 37
RPARENT ) 37
PLUS + 37
INTCON 4 37
MULT * 37
IDENFR F2 37
LPARENT ( 37
IDENFR c 37
RPARENT ) 37
PLUS + 37
IDENFR F2 37
LPARENT ( 37
IDENFR b 37
RPARENT ) 37
RPARENT ) 37
MULT * 37
LPARENT ( 37
IDENFR b 37
MINU - 37
IDENFR a 37
RPARENT ) 37
DIV / 37
INTCON 6 37
SEMICN ; 37
RETURNTK return 38
INTCON 0 38
SEMICN ; 38
RBRACE } 39
FLOATTK float 41
IDENFR asr5 41
LPARENT ( 41
FLOATTK float 41
IDENFR a 41
COMMA , 41
FLOATTK float 41
IDENFR b 41
COMMA , 41
FLOATTK float 41
IDENFR eps 41
COMMA , 41
FLOATTK float 41
IDENFR A 41
COMMA , 41
INTTK int 41
IDENFR flag 41
RPARENT ) 41
LBRACE { 41
FLOATTK float 42
IDENFR c 42
ASSIGN = 42
IDENFR a 42
PLUS + 42
LPARENT ( 42
IDENFR b 42
MINU - 42
IDENFR a 42
RPARENT ) 42
DIV / 42
INTCON 2 42
SEMICN ; 42
FLOATTK float 43
IDENFR L 43
ASSIGN = 43
IDENFR simpson 43
LPARENT ( 43
IDENFR a 43
COMMA , 43
IDENFR c 43
COMMA , 43
IDENFR flag 43
RPARENT ) 43
COMMA , 43
IDENFR R 43
ASSIGN = 43
IDENFR simpson 43
LPARENT ( 43
IDENFR c 43
COMMA , 43
IDENFR b 43
COMMA , 43
IDENFR flag 43
RPARENT ) 43
SEMICN ; 43
IFTK if 44
LPARENT ( 44
IDENFR my_fabs 44
LPARENT ( 44
IDENFR L 44
PLUS + 44
IDENFR R 44
MINU - 44
IDENFR A 44
RPARENT ) 44
LEQ <= 44
INTCON 15 44
MULT * 44
IDENFR eps 44
RPARENT ) 44
RETURNTK return 44
IDENFR L 44
PLUS + 44
IDENFR R 44
PLUS + 44
LPARENT ( 44
IDENFR L 44
PLUS + 44
IDENFR R 44
MINU - 44
IDENFR A 44
RPARENT ) 44
DIV / 44
FLOATCON 15.0 44
SEMICN ; 44
RETURNTK return 45
IDENFR asr5 45
LPARENT ( 45
IDENFR a 45
COMMA , 45
IDENFR c 45
COMMA , 45
IDENFR eps 45
DIV / 45
INTCON 2 45
COMMA , 45
IDENFR L 45
COMMA , 45
IDENFR flag 45
RPARENT ) 45
PLUS + 45
IDENFR asr5 45
LPARENT ( 45
IDENFR c 45
COMMA , 45
IDENFR b 45
COMMA , 45
IDENFR eps 45
DIV / 45
INTCON 2 45
COMMA , 45
IDENFR R 45
COMMA , 45
IDENFR flag 45
RPARENT ) 45
SEMICN ; 45
RBRACE } 46
FLOATTK float 48
IDENFR asr4 48
LPARENT ( 48
FLOATTK float 48
IDENFR a 48
COMMA , 48
FLOATTK float 48
IDENFR b 48
COMMA , 48
FLOATTK float 48
IDENFR eps 48
COMMA , 48
INTTK int 48
IDENFR flag 48
RPARENT ) 48
LBRACE { 48
RETURNTK return 49
IDENFR asr5 49
LPARENT ( 49
IDENFR a 49
COMMA , 49
IDENFR b 49
COMMA , 49
IDENFR eps 49
COMMA , 49
IDENFR simpson 49
LPARENT ( 49
IDENFR a 49
COMMA , 49
IDENFR b 49
COMMA , 49
IDENFR flag 49
RPARENT ) 49
COMMA , 49
IDENFR flag 49
RPARENT ) 49
SEMICN ; 49
RBRACE } 50
FLOATTK float 52
IDENFR eee 52
LPARENT ( 52
FLOATTK float 52
IDENFR x 52
RPARENT ) 52
LBRACE { 52
IFTK if 53
LPARENT ( 53
IDENFR x 53
GRE > 53
FLOATCON 1e-3 53
RPARENT ) 53
LBRACE { 53
FLOATTK float 54
IDENFR ee 54
ASSIGN = 54
IDENFR eee 54
LPARENT ( 54
IDENFR x 54
DIV / 54
INTCON 2 54
RPARENT ) 54
SEMICN ; 54
RETURNTK return 55
IDENFR ee 55
MULT * 55
IDENFR ee 55
SEMICN ; 55
RBRACE } 56
RETURNTK return 57
INTCON 1 57
PLUS + 57
IDENFR x 57
PLUS + 57
IDENFR x 57
MULT * 57
IDENFR x 57
DIV / 57
INTCON 2 57
PLUS + 57
IDENFR my_pow 57
LPARENT ( 57
IDENFR x 57
COMMA , 57
INTCON 3 57
RPARENT ) 57
DIV / 57
INTCON 6 57
PLUS + 57
IDENFR my_pow 57
LPARENT ( 57
IDENFR x 57
COMMA , 57
INTCON 4 57
RPARENT ) 57
DIV / 57
INTCON 24 57
PLUS + 57
IDENFR my_pow 58
LPARENT ( 58
IDENFR x 58
COMMA , 58
INTCON 5 58
RPARENT ) 58
DIV / 58
INTCON 120 58
SEMICN ; 58
RBRACE } 59
FLOATTK float 61
IDENFR my_exp 61
LPARENT ( 61
FLOATTK float 61
IDENFR x 61
RPARENT ) 61
LBRACE { 61
IFTK if 62
LPARENT ( 62
IDENFR x 62
LSS < 62
INTCON 0 62
RPARENT ) 62
RETURNTK return 62
INTCON 1 62
DIV / 62
IDENFR my_exp 62
LPARENT ( 62
MINU - 62
IDENFR x 62
RPARENT ) 62
SEMICN ; 62
INTTK int 63
IDENFR n 63
ASSIGN = 63
IDENFR x 63
SEMICN ; 63
IDENFR x 64
ASSIGN = 64
IDENFR x 64
MINU - 64
IDENFR n 64
SEMICN ; 64
FLOATTK float 65
IDENFR e1 65
ASSIGN = 65
IDENFR my_pow 65
LPARENT ( 65
IDENFR e 65
COMMA , 65
IDENFR n 65
RPARENT ) 65
SEMICN ; 65
FLOATTK float 66
IDENFR e2 66
ASSIGN = 66
IDENFR eee 66
LPARENT ( 66
IDENFR x 66
RPARENT ) 66
SEMICN ; 66
RETURNTK return 67
IDENFR e1 67
MULT * 67
IDENFR e2 67
SEMICN ; 67
RBRACE } 68
FLOATTK float 70
IDENFR my_ln 70
LPARENT ( 70
FLOATTK float 70
IDENFR x 70
RPARENT ) 70
LBRACE { 70
RETURNTK return 70
IDENFR asr4 70
LPARENT ( 70
INTCON 1 70
COMMA , 70
IDENFR x 70
COMMA , 70
FLOATCON 1e-8 70
COMMA , 70
INTCON 1 70
RPARENT ) 70
SEMICN ; 70
RBRACE } 70
FLOATTK float 72
IDENFR my_log 72
LPARENT ( 72
FLOATTK float 72
IDENFR a 72
COMMA , 72
FLOATTK float 72
IDENFR N 72
RPARENT ) 72
LBRACE { 72
RETURNTK return 72
IDENFR my_ln 72
LPARENT ( 72
IDENFR N 72
RPARENT ) 72
DIV / 72
IDENFR my_ln 72
LPARENT ( 72
IDENFR a 72
RPARENT ) 72
SEMICN ; 72
RBRACE } 72
FLOATTK float 74
IDENFR my_powf 74
LPARENT ( 74
FLOATTK float 74
IDENFR a 74
COMMA , 74
FLOATTK float 74
IDENFR x 74
RPARENT ) 74
LBRACE { 74
RETURNTK return 74
IDENFR my_exp 74
LPARENT ( 74
IDENFR x 74
MULT * 74
IDENFR my_ln 74
LPARENT ( 74
IDENFR a 74
RPARENT ) 74
RPARENT ) 74
SEMICN ; 74
RBRACE } 74
INTTK int 76
IDENFR main 76
LPARENT ( 76
RPARENT ) 76
LBRACE { 76
INTTK int 77
IDENFR num 77
ASSIGN = 77
IDENFR getint 77
LPARENT ( 77
RPARENT ) 77
SEMICN ; 77
WHILETK while 78
LPARENT ( 78
IDENFR num 78
RPARENT ) 78
LBRACE { 78
FLOATTK float 79
IDENFR x 79
ASSIGN = 79
IDENFR getfloat 79
LPARENT ( 79
RPARENT ) 79
COMMA , 79
IDENFR y 79
ASSIGN = 79
IDENFR getfloat 79
LPARENT ( 79
RPARENT ) 79
SEMICN ; 79
IDENFR putfloat 80
LPARENT ( 80
IDENFR my_fabs 80
LPARENT ( 80
IDENFR x 80
RPARENT ) 80
RPARENT ) 80
SEMICN ; 80
IDENFR putch 81
LPARENT ( 81
INTCON 32 81
RPARENT ) 81
SEMICN ; 81
IDENFR putfloat 82
LPARENT ( 82
IDENFR my_pow 82
LPARENT ( 82
IDENFR x 82
COMMA , 82
INTCON 2 82
RPARENT ) 82
RPARENT ) 82
SEMICN ; 82
IDENFR putch 83
LPARENT ( 83
INTCON 32 83
RPARENT ) 83
SEMICN ; 83
IDENFR putfloat 84
LPARENT ( 84
IDENFR my_sqrt 84
LPARENT ( 84
IDENFR x 84
RPARENT ) 84
RPARENT ) 84
SEMICN ; 84
IDENFR putch 85
LPARENT ( 85
INTCON 32 85
RPARENT ) 85
SEMICN ; 85
IDENFR putfloat 86
LPARENT ( 86
IDENFR my_exp 86
LPARENT ( 86
IDENFR x 86
RPARENT ) 86
RPARENT ) 86
SEMICN ; 86
IDENFR putch 87
LPARENT ( 87
INTCON 32 87
RPARENT ) 87
SEMICN ; 87
IFTK if 88
LPARENT ( 88
IDENFR x 88
GRE > 88
INTCON 0 88
RPARENT ) 88
LBRACE { 88
IDENFR putfloat 89
LPARENT ( 89
IDENFR my_ln 89
LPARENT ( 89
IDENFR x 89
RPARENT ) 89
RPARENT ) 89
SEMICN ; 89
RBRACE } 90
ELSETK else 90
LBRACE { 90
IDENFR putch 91
LPARENT ( 91
INTCON 45 91
RPARENT ) 91
SEMICN ; 91
RBRACE } 92
IDENFR putch 93
LPARENT ( 93
INTCON 32 93
RPARENT ) 93
SEMICN ; 93
IFTK if 94
LPARENT ( 94
IDENFR x 94
GRE > 94
INTCON 0 94
AND && 94
IDENFR y 94
GRE > 94
INTCON 0 94
RPARENT ) 94
LBRACE { 94
IDENFR putfloat 95
LPARENT ( 95
IDENFR my_log 95
LPARENT ( 95
IDENFR x 95
COMMA , 95
IDENFR y 95
RPARENT ) 95
RPARENT ) 95
SEMICN ; 95
RBRACE } 96
ELSETK else 96
LBRACE { 96
IDENFR putch 97
LPARENT ( 97
INTCON 45 97
RPARENT ) 97
SEMICN ; 97
RBRACE } 98
IDENFR putch 99
LPARENT ( 99
INTCON 32 99
RPARENT ) 99
SEMICN ; 99
IFTK if 100
LPARENT ( 100
IDENFR x 100
GRE > 100
INTCON 0 100
RPARENT ) 100
LBRACE { 100
IDENFR putfloat 101
LPARENT ( 101
IDENFR my_powf 101
LPARENT ( 101
IDENFR x 101
COMMA , 101
IDENFR y 101
RPARENT ) 101
RPARENT ) 101
SEMICN ; 101
RBRACE } 102
ELSETK else 102
LBRACE { 102
IDENFR putch 103
LPARENT ( 103
INTCON 45 103
RPARENT ) 103
SEMICN ; 103
RBRACE } 104
IDENFR putch 105
LPARENT ( 105
INTCON 10 105
RPARENT ) 105
SEMICN ; 105
IDENFR num 106
ASSIGN = 106
IDENFR num 106
MINU - 106
INTCON 1 106
SEMICN ; 106
RBRACE } 107
RETURNTK return 108
INTCON 0 108
SEMICN ; 108
RBRACE } 109
